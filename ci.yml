resources:
- repo: self

jobs:
- job: windows_x64
  strategy:
    matrix:
      DEBUG:
        Configuration: debug
      RELEASE:
        Configuration: release
  displayName: 'Windows x64'
  timeoutInMinutes: 30
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: UseDotNet@1
    displayName: 'Install .NET Core 3.x SDK'
    inputs:
      packageType: 'sdk'
      version: '3.0.100-preview9-014004'
      includePreviewVersions: true
  - powershell: |
      dotnet build -c $(Configuration) src\EventStore.sln
      if (-Not $?) { throw "Exit code is $?" }
    workingDirectory: $(Build.SourcesDirectory)
    displayName: Compile
  - powershell: |
      (Get-ChildItem -Attributes Directory src | % FullName) -Match '.Tests' | `
        ForEach-Object {
          dotnet test -v normal -c $(Configuration) --no-build --logger trx $_ -- RunConfiguration.TargetPlatform=x64
          if (-Not $?) { throw "Exit code is $?" }
        }
    workingDirectory: $(Build.SourcesDirectory)
    displayName: Test
    errorActionPreference: Stop
  - task: PublishTestResults@2
    displayName: Publish Test Results
    condition: succeededOrFailed()
    inputs:
      testRunTitle: "Windows (.NET Framework)"
      platform: "Windows"
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
  - task: PublishBuildArtifacts@1
    condition: eq(variables['System.PullRequest.IsFork'], 'False')
    displayName: Publish Artifacts
    inputs:
      artifactName: windows-net471-$(Configuration) 
      pathToPublish: '$(Build.SourcesDirectory)\bin\'

- job: macos_x64
  strategy:
    matrix:
      DEBUG:
        Configuration: debug
      RELEASE:
        Configuration: release
  displayName: 'macOS x64'
  timeoutInMinutes: 20
  pool:
    vmImage: 'macOS 10.13'
  steps:
  - task: UseDotNet@1
    displayName: 'Install .NET Core 3.x SDK'
    inputs:
      packageType: 'sdk'
      version: '3.0.100-preview9-014004'
      includePreviewVersions: true
  - bash: . '$(Build.SourcesDirectory)/ci/ap-setup-osx.sh'
    displayName: Setup
  - bash: dotnet build -c $(Configuration) src/EventStore.sln
    displayName: Compile
  - bash: find ./src -maxdepth 1 -type d -name "*.Tests" -print0| xargs -0 -n1 dotnet test -v normal -c $(Configuration) --logger trx
    displayName: Run Tests
  - task: PublishTestResults@2
    displayName: Publish Test Results
    condition: succeededOrFailed()
    inputs:
      testRunTitle: "MacOS 10.13 (Mono 5.16)"
      platform: "MacOS 10.13"
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
  - task: PublishBuildArtifacts@1
    condition: eq(variables['System.PullRequest.IsFork'], 'False')
    displayName: Publish Artifacts
    inputs:
      artifactName: macos-mono516-{{ variables['Configuration'] }}
      pathToPublish: '$(Build.SourcesDirectory)/bin/'

- job: ubuntu_x64
  strategy:
    matrix:
      DEBUG:
        Configuration: debug
      RELEASE:
        Configuration: release

  displayName: Ubuntu 16.04 x64
  timeoutInMinutes: 20
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
    - task: UseDotNet@1
      displayName: 'Install .NET Core 3.x SDK'
      inputs:
        packageType: 'sdk'
        version: '3.0.100-preview9-014004'
        includePreviewVersions: true
    - bash: dotnet build -c $(Configuration) src/EventStore.sln
      displayName: Compile
    - bash: find ./src -maxdepth 1 -type d -name "*.Tests" -print0| xargs -0 -n1 dotnet test -v normal -c $(Configuration) --logger trx
      displayName: Run Tests
    - task: PublishTestResults@2
      displayName: Publish Test Results
      condition: succeededOrFailed()
      inputs:
        testRunTitle: "Ubuntu 16.04 (Mono 5.16)"
        platform: "Ubuntu 16.04"
        testRunner: VSTest
        testResultsFiles: '**/*.trx'
    - task: PublishBuildArtifacts@1
      condition: eq(variables['System.PullRequest.IsFork'], 'False')
      displayName: Publish Artifacts
      inputs:
        artifactName: ubuntu1404-mono516-${{ variables['Configuration'] }}
        pathToPublish: '$(Build.SourcesDirectory)/bin/'